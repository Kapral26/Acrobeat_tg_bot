import asyncio
import logging
import uuid
from dataclasses import dataclass
from pathlib import Path
from tempfile import gettempdir
from typing import Any

from aiogram.types import Message
from sqlalchemy.exc import NoResultFound

from src.domains.tracks.schemas import Track
from src.service.downloader.repository import DownloaderRepo
from src.service.settings.config import Settings


@dataclass
class DownloaderService:
    repository: DownloaderRepo
    settings: Settings
    logger: logging.Logger

    async def find_tracks_on_phrase(self, phrase: str, message: Message) -> list[Track]:
        self.logger.debug(f"Searching for tracks on phrase '{phrase}'")

        founded_tracks = await processing_msg(
            self.repository.find_tracks_on_phrase,
            (phrase,),
            message=message,
            spinner_msg="üîé–ü–æ–∏—Å–∫",
        )

        if not founded_tracks:
            raise NoResultFound

        return [Track.model_validate(x) for x in founded_tracks]

    async def download_track(self, url: str, message: Message):
        self.logger.debug(f"Downloading track '{url}'")
        track_path = Path(gettempdir()) / f"{uuid.uuid4()}.mp3"

        await processing_msg(
            self.repository.download_track,
            (url, track_path),
            message=message,
            spinner_msg="üõ¨ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
        )

        return track_path


async def processing_msg(
    func: callable, args: tuple, message: Message, spinner_msg: str
) -> Any:  # noqa: ANN401
    """–ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è."""
    spinner = [
        f"{spinner_msg} ‚†ã",
        f"{spinner_msg} ‚†ô",
        f"{spinner_msg} ‚†π",
        f"{spinner_msg} ‚†∏",
        f"{spinner_msg} ‚†º",
        f"{spinner_msg} ‚†¥",
        f"{spinner_msg} ‚†¶",
        f"{spinner_msg} ‚†ß",
        f"{spinner_msg} ‚†á",
        f"{spinner_msg} ‚†è",
    ]
    index = 0
    loading_msg = await message.answer(spinner[index])
    task = asyncio.create_task(func(*args))
    # –ê–Ω–∏–º–∞—Ü–∏—è —Å–ø–∏–Ω–Ω–µ—Ä–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    while not task.done():
        index = (index + 1) % len(spinner)
        await loading_msg.edit_text(spinner[index])
        await asyncio.sleep(0.2)
    task_result = task.result()
    await loading_msg.delete()
    return task_result
