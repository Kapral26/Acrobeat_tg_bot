"""
–ú–æ–¥—É–ª—å `base_cache_repository.py` —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑–æ–≤–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ Redis.

–†–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å `RedisBase`, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –º–µ—Ç–æ–¥—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è, –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Redis.
–¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–∞–º–∏, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∫–∞–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
"""

from dataclasses import dataclass

from redis.asyncio import Redis

from src.service.cache.abc import RedisBase


class RedisClientWrapper(RedisBase):
    """
    –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ `RedisBase`.

    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ Redis —á–µ—Ä–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Å TTL;
    - –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π;
    - —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π;
    - —Ä–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ (lists).
    """

    def __init__(self, redis_client: Redis):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.

        :param redis_client: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Redis.
        """
        self.redis_client = redis_client

    async def set(self, key: str, value: str, ttl: int) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Å—Ä–æ–∫–æ–º –∂–∏–∑–Ω–∏ (TTL).

        –ï—Å–ª–∏ –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.

        :param key: –ö–ª—é—á, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ.
        :param value: –ó–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.
        :param ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–ª—é—á–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
        """
        exists = await self.redis_client.exists(key)
        if exists:
            await self.redis_client.delete(key)

        await self.redis_client.setex(name=key, time=ttl, value=value)

    async def get(self, key: str) -> str | None:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É.

        :param key: –ö–ª—é—á, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ.
        :return: –ù–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ `None`, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        """
        data = await self.redis_client.get(key)
        return data.decode("utf-8") if data else None

    async def delete(self, key: str) -> None:
        """
        –£–¥–∞–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É.

        :param key: –ö–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.
        """
        await self.redis_client.delete(key)

    async def expire(self, key: str, ttl: int) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ (TTL) –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞.

        :param key: –ö–ª—é—á, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è TTL.
        :param ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–ª—é—á–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
        """
        await self.redis_client.expire(key, ttl)

    # üîπ –†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ (lists)

    async def rpush(self, key: str, *values: str) -> int:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞."""
        return await self.redis_client.rpush(key, *values)

    async def lpush(self, key: str, *values: str) -> int:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞."""
        return await self.redis_client.lpush(key, *values)

    async def lrange(self, key: str, start: int, end: int) -> list[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞."""
        raw_items = await self.redis_client.lrange(key, start, end)
        return [item.decode("utf-8") for item in raw_items]

    async def llen(self, key: str) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞."""
        return await self.redis_client.llen(key)

    async def lpop(self, key: str) -> str | None:
        """
        –£–¥–∞–ª—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞.

        :param key: –ö–ª—é—á Redis.
        :return: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ None, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.
        """
        item: bytes | None = await self.redis_client.lpop(key)
        return item.decode("utf-8") if item else None

    async def rpop(self, key: str) -> str | None:
        """
        –£–¥–∞–ª—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞.

        :param key: –ö–ª—é—á Redis.
        :return: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ None, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.
        """
        item: bytes | None = await self.redis_client.rpop(key)
        return item.decode("utf-8") if item else None

    async def lrem(self, key: str, count: int, value: str) -> int:
        """–£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é."""
        return await self.redis_client.lrem(key, count, value)

    async def lset(self, key: str, index: int, value: str) -> str:
        """–ó–∞–º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É."""
        return await self.redis_client.lset(key, index, value)

    async def ltrim(self, key: str, start: int, stop: int) -> str:
        """–û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞."""
        return await self.redis_client.ltrim(key, start, stop)


@dataclass
class BaseMsgCleanerRepository(RedisClientWrapper):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∂–µ.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Redis –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π.
    """

    redis_client: Redis

    @property
    def messages_key(self) -> str:
        """–§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π."""
        return "messages_to_delete:{user_id}"

    def __post_init__(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞."""
        super().__init__(self.redis_client)

    async def get_messages_to_delete(self, user_id: int) -> list[int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.

        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å.
        :return: –°–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π.
        """
        key = self.messages_key.format(user_id=user_id)
        raw_items = await self.lrange(key, 0, -1)
        return [int(item) for item in raw_items]

    async def add_message_to_delete(self, user_id: int, message_id: int) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.

        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.
        """
        key = self.messages_key.format(user_id=user_id)
        await self.rpush(key, str(message_id))

    async def delete_messages_to_delete(self, user_id: int) -> None:
        """
        –û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        key = self.messages_key.format(user_id=user_id)
        await self.delete(key)
