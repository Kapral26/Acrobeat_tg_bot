"""
–ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º.

–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–ø–∏—Å–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Ä–∞–∑–±–∏—Ç—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:
- "–ù–∞–∑–∞–¥"
- "–í–ø–µ—Ä–µ–¥"
- "–í –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞"

–¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
"""

from collections.abc import Awaitable, Callable, Sequence

from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.domains.tracks.track_name.message_cleanup import TrackNameMsgCleanerService

ITEM_PER_PAGE = 4


async def show_msg_pagination(  # noqa: PLR0913
    callback: CallbackQuery,
    message_text: str,
    data: Sequence,
    keyboard: Callable[[list, int, int], Awaitable[InlineKeyboardMarkup]],
    cleaner_service: TrackNameMsgCleanerService | None = None,
    page: int | None = None,
) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.

    :param callback: –û–±—ä–µ–∫—Ç CallbackQuery, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏.
    :param message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è.
    :param data: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª—ë–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    :param keyboard: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç InlineKeyboardMarkup –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    :param cleaner_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∂–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
    :param page: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
    """
    total_pages = (len(data) + ITEM_PER_PAGE - 1) // ITEM_PER_PAGE
    start_idx = (page - 1) * ITEM_PER_PAGE
    end_idx = start_idx + ITEM_PER_PAGE
    current_page: Sequence = data[start_idx:end_idx]
    send_msg = await callback.message.edit_text(
        message_text,
        parse_mode="html",
        reply_markup=await keyboard(current_page, page, total_pages),
    )
    if cleaner_service:
        await cleaner_service.collect_cliper_messages_to_delete(
            message_id=send_msg.message_id,
            user_id=callback.from_user.id,
        )


async def create_paginated_keyboard(  # noqa: PLR0913
    items: Sequence,
    item_params: str,
    page: int,
    total_pages: int,
    bt_prefix: str,
    bt_pagin_prefix: str,
    bottom_buttons: Sequence[InlineKeyboardButton] | None = None,
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.

    :param items: –≠–ª–µ–º–µ–Ω—Ç—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    :param item_params: –ò–º—è –∞—Ç—Ä–∏–±—É—Ç–∞ –æ–±—ä–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏.
    :param page: –¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    :param total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü.
    :param bt_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data –∫–Ω–æ–ø–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
    :param bt_pagin_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    :param bottom_buttons: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–Ω–∏–∑—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
    :return: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup.
    """
    builder = InlineKeyboardBuilder()

    for item in items:
        attr = getattr(item, item_params)
        builder.row(
            InlineKeyboardButton(
                text=attr,
                callback_data=f"{bt_prefix}:{attr}",
            ),
        )

    builder.adjust(2)

    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"{bt_pagin_prefix}:{page - 1}",
            ),
        )
    if page < total_pages:
        pagination_buttons.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=f"{bt_pagin_prefix}:{page + 1}",
            ),
        )

    builder.row(*pagination_buttons)
    builder.row(
        InlineKeyboardButton(
            text="Ô∏èüîÅ –í –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞",
            callback_data=f"{bt_pagin_prefix}:1",
        ),
    )
    if bottom_buttons:
        builder.row(*bottom_buttons)
    return builder.as_markup()
