import asyncio

from aiogram import Bot, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dishka import FromDishka
from dishka.integrations.aiogram import inject

from src.domains.tracks import track_router
from src.domains.tracks.keyboards import track_list_kb
from src.service.downloader.service import DownloaderService


class FindTrackStates(StatesGroup):
    WAITING_FOR_PHRASE = State()


@track_router.callback_query(
    F.data == "find_track",
)
@inject
async def search_tracks(
    callback: types.CallbackQuery,
    state: FSMContext,
):
    await callback.answer()
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.")
    await state.set_state(FindTrackStates.WAITING_FOR_PHRASE)


@track_router.message(FindTrackStates.WAITING_FOR_PHRASE)
@inject
async def handle_preview_search_track(
    message: types.Message,
    state: FSMContext,
    bot: Bot,
    downloader: FromDishka[DownloaderService],
):
    # –°–∏–º–≤–æ–ª—ã —Å–ø–∏–Ω–Ω–µ—Ä–∞
    spinner = ["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"]
    index = 0

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    loading_msg = await message.answer(spinner[index])

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∫–æ—Ä—É—Ç–∏–Ω–µ
    task = asyncio.create_task(downloader.find_tracks_on_phrase(message.text))

    # –ê–Ω–∏–º–∞—Ü–∏—è —Å–ø–∏–Ω–Ω–µ—Ä–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    while not task.done():
        index = (index + 1) % len(spinner)
        await loading_msg.edit_text(spinner[index])
        await asyncio.sleep(0.2)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    preview_phrase = task.result()

    # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await loading_msg.delete()

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–µ—Å–Ω—é:",
        reply_markup=await track_list_kb(preview_phrase),
    )

    await state.clear()


#
# @trolling_phrases_router.callback_query(F.data == "add_previewed_phrase")
# @inject
# async def add_previewed_phrase(
#     callback: CallbackQuery,
#     trolling_phrases_service: FromDishka[TrollingPhrasesService],
# ):
#     await callback.answer()
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—Ä–∞–∑—É
#     try:
#         await trolling_phrases_service.add_phrase(callback.message.text)
#     except ValueError as e:
#         await callback.message.edit_text(
#             str(e),
#             reply_markup=await get_trolling_phrases_inline_keyboard(),
#         )
#     else:
#         # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
#         await callback.message.edit_text(
#             f"‚úÖ –§—Ä–∞–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: <i>{callback.message.text}</i>", parse_mode="HTML"
#         )
#         await callback.message.answer(
#             "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
#             reply_markup=await get_trolling_phrases_inline_keyboard(),
#         )
