"""
–ú–æ–¥—É–ª—å `handlers.py` —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç—Ä–µ–∫–∞–º–∏.

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:
- –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤;
- –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Å—ã–ª–æ–∫ —Å YouTube;
- –æ—Ç–ø—Ä–∞–≤–∫—É –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ —á–∞—Ç.
"""

import logging

from aiogram import Bot, F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from dishka import FromDishka
from dishka.integrations.aiogram import inject

from src.domains.tracks.filters import YouTubeLinkFilter
from src.domains.tracks.keyboards import (
    set_track_name_keyboard,
)
from src.domains.tracks.schemas import (
    DownloadTelegramParams,
    DownloadTrackParams,
    DownloadYTParams,
)
from src.domains.tracks.service import (
    TrackService,
)
from src.domains.users.services import UserService

logger = logging.getLogger(__name__)

track_router = Router(name="track_router")


@track_router.callback_query(F.data.startswith("d_p:"))
@inject
async def callback_query(
    callback: CallbackQuery,
    bot: Bot,
    state: FSMContext,
    track_service: FromDishka[TrackService],
    user_service: FromDishka[UserService],
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ.

    :param callback: CallbackQuery –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏.
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Aiogram.
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
    :param track_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–∫–∞–º–∏.
    :param user_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    """
    await callback.answer("–°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã, —Å–∫–∞—á–∞—é —Ñ–∞–π–ª.")
    download_params = callback.data.split("d_p:")[-1]
    await callback.message.delete()

    download_params = DownloadTrackParams.model_validate_json(download_params)

    if not download_params:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É.")
        return

    await user_service.del_session_query_text(callback.from_user.id)
    track_path = await track_service.download_full_track(
        message=callback.message, download_params=download_params, bot=bot
    )
    await state.set_data({"track_path": track_path})


@track_router.message(YouTubeLinkFilter())
async def handle_youtube_link(
    message: Message,
    bot: Bot,
    state: FSMContext,
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ YouTube.

    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Aiogram.
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
    """
    await message.answer(
        text="üéßÔ∏è –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞.",
        reply_markup=await set_track_name_keyboard(),
    )

    await state.set_data(
        {"download_params": DownloadYTParams(url=message.text).model_dump()}
    )


@track_router.message(F.content_type.in_({types.ContentType.AUDIO}))
@inject
async def handle_audio_message(
    message: Message,
    bot: Bot,
    state: FSMContext,
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–º.

    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏ Telegram-–∞—É–¥–∏–æ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Aiogram.
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
    """
    if message.audio:
        logger.info("–ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", message.from_user.id)
        audio = message.audio
        file_id = audio.file_id

        await state.set_data(
            {"download_params": DownloadTelegramParams(url=file_id).model_dump()}
        )

        await message.answer(
            text="üéßÔ∏è –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞.",
            reply_markup=await set_track_name_keyboard(),
        )
