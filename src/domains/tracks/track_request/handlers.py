"""
–ú–æ–¥—É–ª—å `handlers.py` —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:
- –æ—Ç–∫—Ä—ã—Ç–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤;
- –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤;
- –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏.
"""

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from dishka import FromDishka
from dishka.integrations.aiogram import inject

from src.domains.common.message_pagination import show_msg_pagination
from src.domains.tracks.track_request.keyboards import (
    kb_confirm_track_request,
    kb_no_track_request,
    kb_user_track_request,
)
from src.domains.tracks.track_request.service import TrackRequestService
from src.domains.users.services import UserService

track_request_router = Router(name="track_request_router")


@track_request_router.callback_query(F.data == "set_track_request")
@inject
async def try_choose_track_name(
    callback: CallbackQuery,
    track_request_service: FromDishka[TrackRequestService],
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.

    :param callback: CallbackQuery –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ú–æ—è –∏—Å—Ç–æ—Ä–∏—è".
    :param track_request_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ –ø–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤.
    """
    await callback.answer()
    await _handle_request_tracks(callback, track_request_service, page=1)


@track_request_router.callback_query(F.data.startswith("track_request_page:"))
@inject
async def handle_request_tracks(
    callback: CallbackQuery,
    track_request_service: FromDishka[TrackRequestService],
    page: int | None = None,
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.

    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø—Ä–æ—Å–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ö —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

    :param callback: CallbackQuery —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–æ–º–µ—Ä–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    :param track_request_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ –ø–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤.
    :param page: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏–∑ callback.data).
    """
    if page is None:
        page = int(callback.data.split(":")[-1])
    await _handle_request_tracks(callback, track_request_service, page)


async def _handle_request_tracks(
    callback: CallbackQuery,
    track_request_service: TrackRequestService,
    page: int | None = None,
) -> None:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.

    :param callback: CallbackQuery –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param track_request_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ –ø–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤.
    :param page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    await callback.answer("–°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –≤—ã –∏—Å–∫–∞–ª–∏ —Ä–∞–Ω–µ–µ...")

    user_track_requests = await track_request_service.get_track_user_request(
        callback.from_user.id
    )

    if not user_track_requests:
        await callback.message.edit_text(
            """üìÇ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.\n\n
–¢—ã –µ—â—ë –Ω–µ –∏—Å–∫–∞–ª —Ç—Ä–µ–∫–∏.\n
–ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ üëá""",
            reply_markup=await kb_no_track_request(),
        )
        return

    keyboard = kb_user_track_request

    await show_msg_pagination(
        callback=callback,
        page=page,
        keyboard=keyboard,
        message_text="<b>üìÇ –¢–≤–æ–∏ –ø—Ä–æ—à–ª—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</b>\n\n–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –∏–ª–∏ –∑–∞–¥–∞–π –Ω–æ–≤—ã–π üéµ",
        data=user_track_requests,
    )


@track_request_router.callback_query(F.data.startswith("t_r:"))
@inject
async def callback_query(
    callback: CallbackQuery,
    state: FSMContext,
    user_service: FromDishka[UserService],
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏.

    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.

    :param callback: CallbackQuery —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ.
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º.
    :param user_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    """
    await callback.answer()
    query_text = callback.data.split(":")[-1]
    await user_service.set_session_query_text(callback.from_user.id, query_text)

    await callback.message.edit_text(
        f"üìå –¢—ã –≤—ã–±—Ä–∞–ª: <b>{query_text}</b>\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä?",
        reply_markup=await kb_confirm_track_request(),
        parse_mode="html",
    )
