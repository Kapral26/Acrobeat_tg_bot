# A generic, single database configuration.
# Это общий конфигурационный файл для одного базового подключения к БД.

[alembic]
# path to migration scripts.
# Это путь к директории с миграциями, обычно указывается относительно текущего файла alembic.ini
script_location = %(here)s/migrations

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Раскомментируйте строку ниже, если хотите, чтобы имена файлов начинались с даты и времени
# см. https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# для всех доступных токенов
file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# По умолчанию это текущая рабочая директория. Для нескольких путей используйте разделитель из "path_separator"
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
# as well as the filename.
# Если указано, требуется библиотека python>=3.9 или backports.zoneinfo и tzdata.
# Любые необходимые зависимости можно установить, добавив `alembic[tz]` в pip requirements
# строковое значение передается в ZoneInfo()
# оставьте пустым для использования локального времени
# timezone =

# max length of characters to apply to the "slug" field
# ограничивает максимальную длину поля "slug"
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# включите в 'true', чтобы запускать среду во время команды 'revision'
# revision_environment = false

# set to 'true' to allow .pyc и .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# включите в 'true', чтобы разрешить файлы .pyc/.pyo без исходного .py считаться миграциями
# sourceless = false

# version location specification; This defaults
# to <script_location>/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# Разделитель путей задаётся через "path_separator"
# version_locations = %(here)s/bar:%(here)s/bat:%(here)s/alembic/versions

# path_separator; Это указывает, какой символ используется для разделения списков путей,
# включая version_locations и prepend_sys_path в configparser файлах, таких как alembic.ini.
# По умолчанию в новых файлах alembic.ini используется "os", который использует os.pathsep
# для разделения путей.
#
# Обратите внимание, что для поддержки старых alembic.ini файлов, этот параметр НЕ применяется,
# если path_separator не указан в alembic.ini. Если этот опция отсутствует совсем, то:
#
# 1. Парсинг version_locations возвращается к использованию устаревшего ключа "version_path_separator",
#    если он отсутствует — то к устаревшему поведению разделения по пробелам и/или запятым.
# 2. Парсинг prepend_sys_path возвращается к устаревшему поведению разделения по пробелам, запятым или двоеточиям.
#
# Возможные значения path_separator:
#
# path_separator = :
# path_separator = ;
# path_separator = space
# path_separator = newline
#
# Используется os.pathsep. Это стандартное значение для новых проектов.
path_separator = os

# set to 'true' to search source files recursively
# в каждом каталоге "version_locations"
# новое в Alembic версии 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# кодировка, используемая при записи файлов миграций
# output_encoding = utf-8

# database URL.  This is consumed by the user-maintained env.py script only.
# другие способы настройки URL к БД могут быть изменены внутри env.py
sqlalchemy.url = driver://user:pass@localhost/dbname


[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples
# post_write_hooks определяет скрипты или функции Python, которые выполняются
# над только что сгенерированными файлами миграций. См. документацию для деталей и примеров

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# lint with attempts to fix using "ruff" - use the module runner, against the "ruff" module
# hooks = ruff
# ruff.type = module
# ruff.module = ruff
# ruff.options = check --fix REVISION_SCRIPT_FILENAME

# Alternatively, use the exec runner to execute a binary found on your PATH
; hooks = ruff
; ruff.type = exec
; ruff.executable = ruff
; ruff.options = check --fix REVISION_SCRIPT_FILENAME

# Logging configuration.  This is also consumed by the user-maintained
# env.py script only.
# Конфигурация логирования. Также используется в пользовательском скрипте env.py

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console
qualname =

[logger_sqlalchemy]
level = WARNING
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S