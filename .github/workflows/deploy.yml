name: Deploy to VPS

on:
  push:
    branches: [ main ]

jobs:
  changelog:
    name: "üöÄ Semantic Release (Version & Changelog)"
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip ci]')
    steps:
      - name: "üì¶ Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # –í–∞–∂–Ω–æ: semantic-release –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "üêç Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: "üìã Install semantic-release"
        run: pip install semantic-release

      - name: "üöÄ Run Semantic Release (Dry-run first)"
        run: |
          # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—É–¥–µ—Ç –ª–∏ —Ä–µ–ª–∏–∑
          if semantic-release version --dry-run; then
            echo "üî¥ New release will be created"
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–ª–∏–∑
            semantic-release version --noop  # –¢–æ–ª—å–∫–æ –≤–µ—Ä—Å–∏—è –∏ changelog, –±–µ–∑ push
            semantic-release changelog --unreleased-only
          else
            echo "üü¢ No new release needed"
            exit 0
          fi

      - name: "üìÑ Commit and push changes"
        if: success()
        run: |
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ pyproject.toml –∏–ª–∏ CHANGELOG.md
          if git diff --quiet pyproject.toml CHANGELOG.md; then
            echo "üü¢ No changes detected"
          else
            echo "üî¥ Changes detected - committing"
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add pyproject.toml CHANGELOG.md
            git commit -m "chore(release): auto-update version and changelog [skip ci]"
            git push
          fi
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: "üêç Install Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: "üì¶ Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install ruff
      - name: "üßπRun Ruff"
        run: ruff check --output-format=github --config ./pyproject.toml .

  deploy:
    name: "üöÄ Deploy to Server"
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: "üßæ Checkout code"
        uses: actions/checkout@v4

      - name: "üîê Set up SSH"
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: "üì¶ Copy files to VPS"
        run: |
          rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.DEPLOY_DIR }}/${{ github.event.repository.name }}

      - name: "üìù Generate .env file on server"
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          cat <<EOT > ${{ secrets.DEPLOY_DIR }}/${{ github.event.repository.name }}/.env
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT=5432
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=6379
          REDIS_DB=0
          BOT_TOKEN=${{ secrets.BOT_TOKEN }}
          DEBUG=${{ secrets.DEBUG }}
          EOT
          EOF

      - name: "üöÄ Start database for migrations"
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          cd ${{ secrets.DEPLOY_DIR }}/${{ github.event.repository.name }}
          docker compose down
          docker compose up -d --build database
          EOF

      - name: "üõ†Ô∏è Run migrations"
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          cd ${{ secrets.DEPLOY_DIR }}/${{ github.event.repository.name }}
          echo "üìÅ Running Alembic migrations"
          docker compose run --rm --entrypoint="uv run alembic upgrade head" bot
          EOF

      - name: "üéØ Start all services"
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          cd ${{ secrets.DEPLOY_DIR }}/${{ github.event.repository.name }}
          docker compose up -d
          EOF