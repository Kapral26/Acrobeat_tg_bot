services:
  database:
    image: postgres:16-alpine
    container_name: postgres_acrobeat
    env_file:
      - .env
    environment:
      PGDATA: ./pgdata
    ports:
      - "5432:5432"
    networks:
      - my_app_network
    volumes:
      - ./pgdata:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres_user -d postgres_db" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true

  cache:
    image: redis:7.2.4-alpine
    container_name: redis_acrobeat
    env_file:
      - .env
    ports:
      - "6379:6379"
    networks:
      - my_app_network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  bot:
    build: .
    container_name: acrobeat_bot
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=database
      - REDIS_HOST=cache
    depends_on:
      - database
      - cache
    networks:
      - my_app_network
    restart: unless-stopped
    command: uv run python main.py
    tty: true
    stdin_open: true

networks:
  my_app_network:
    driver: bridge


volumes:
  pgdata:
    driver: local